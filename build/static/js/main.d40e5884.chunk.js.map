{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","componentDidMount","socket","io","path","query","on","success","console","log","sdp","textref","value","JSON","stringify","pc","setRemoteDescription","RTCSessionDescription","candidate","addIceCandidate","RTCIceCandidate","RTCPeerConnection","urls","onicecandidate","e","sendToPeer","oniceconnectionstatechange","onaddstream","remoteVideoref","current","srcObject","stream","navigator","mediaDevices","getUserMedia","audio","video","then","window","localStream","localVideoref","addStream","catch","messageType","payload","emit","socketID","id","createOffer","offerToReceiveVideo","setLocalDescription","createAnswer","desc","parse","addCandidate","candidates","forEach","React","createRef","style","textAlign","marginTop","width","height","margin","backgroundColor","border","ref","this","autoPlay","onClick","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d40e5884.chunk.js","sourcesContent":["// import React,{ Component } from 'react';\n// import './App.css';\n\n// class App extends Component{\n//   constructor(props){\n//     super(props)\n//     //creating local reference to the video\n//     //using createref, now DOM nodes can be used in the react-app\n//     this.localVideoref=React.createRef();\n//     this.remoteVideoref=React.createRef();\n//   }\n//   componentDidMount(){\n//     //we need to instantiate a new RTC coneection b/w the peers\n//     this.pc=new RTCPeerConnection(null);\n//     const constraints = {video:true,audio:0}\n//     const success=(stream)=>{\n//       this.localVideoref.current.srcObject = stream;\n//       console.log(\"access granted \");\n//     };\n//     const failure=(error)=>{\n//       console.log('getUserMedia Error: ',error);\n//     };\n//     navigator.mediaDevices.getUserMedia(constraints)\n//     .then(success)\n//     .catch(failure);\n//     //this is the second or the old way to get access to camera\n//     // navigator.getUserMedia(constraints,success,failure);\n//   }\n//   render(){\n\n//     return(\n//       <div>\n//         {/* The exterior set of curly braces are letting JSX know you want a JS expression. The interior set of */}\n//         {/*  curly braces represent a JavaScript object, meaning youâ€™re passing in a object to the style attribute. */}\n//         <video style={\n//           {\n//               height:200,\n//               width:\"auto\",\n//               backgroundColor:\"black\",\n//               margin:10,\n//               borderBlockColor:\"red\",\n//               border:\"4px dotted white\"\n\n//           }\n//         }\n//         ref={this.localVideoref} autoPlay controls></video>\n//         <video style={\n//           {\n//               height:200,\n//               width:\"auto\",\n//               backgroundColor:\"black\",\n//               margin:10,\n//               borderBlockColor:\"red\",\n//               border:\"4px dotted white\"\n\n//           }\n//         }\n//         ref={this.remoteVideoref} autoPlay controls></video>\n//         <br />\n\n// <button onClick={this.createOffer}>Request</button>\n// <button onClick={this.createAnswer}>Answer</button>\n\n// <br />\n// <textarea style={{ width: 450, height:40 }} ref={ref => { this.textref = ref }} />\n\n// {/* <br />\n// <button onClick={this.setRemoteDescription}>Set Remote Desc</button>\n// <button onClick={this.addCandidate}>Add Candidate</button> */}\n//       </div>\n//     );\n//   }\n// }\n// export default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport React, { Component } from 'react';\n\nimport io from 'socket.io-client'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    // https://reactjs.org/docs/refs-and-the-dom.html\n    this.localVideoref = React.createRef()\n    this.remoteVideoref = React.createRef()\n\n    this.socket = null\n    this.candidates = []\n  }\n\n  componentDidMount = () => {\n\n    this.socket = io(\n      '/webrtcPeer',\n      {\n        path: '/webrtc',\n        query: {}\n      }\n    )\n\n    this.socket.on('connection-success', success => {\n      console.log(success)\n    })\n\n    this.socket.on('offerOrAnswer', (sdp) => {\n      this.textref.value = JSON.stringify(sdp)\n\n      // set sdp as remote description\n      this.pc.setRemoteDescription(new RTCSessionDescription(sdp))\n    })\n\n    this.socket.on('candidate', (candidate) => {\n      // console.log('From Peer... ', JSON.stringify(candidate))\n      // this.candidates = [...this.candidates, candidate]\n      this.pc.addIceCandidate(new RTCIceCandidate(candidate))\n    })\n\n    // const pc_config = null\n\n    const pc_config = {\n      \"iceServers\": [\n        // {\n        //   urls: 'stun:[STUN_IP]:[PORT]',\n        //   'credentials': '[YOR CREDENTIALS]',\n        //   'username': '[USERNAME]'\n        // },\n        {\n          urls : 'stun:stun.l.google.com:19302'\n        }\n      ]\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection\n    // create an instance of RTCPeerConnection\n    this.pc = new RTCPeerConnection(pc_config)\n\n    // triggered when a new candidate is returned\n    this.pc.onicecandidate = (e) => {\n      // send the candidates to the remote peer\n      // see addCandidate below to be triggered on the remote peer\n      if (e.candidate) {\n        // console.log(JSON.stringify(e.candidate))\n        this.sendToPeer('candidate', e.candidate)\n      }\n    }\n\n    // triggered when there is a change in connection state\n    this.pc.oniceconnectionstatechange = (e) => {\n      console.log(e)\n    }\n\n    // triggered when a stream is added to pc, see below - this.pc.addStream(stream)\n    this.pc.onaddstream = (e) => {\n      this.remoteVideoref.current.srcObject = e.stream\n    }\n\n    // called when getUserMedia() successfully returns - see below\n    // getUserMedia() returns a MediaStream object (https://developer.mozilla.org/en-US/docs/Web/API/MediaStream)\n    const success = (stream) => {\n      window.localStream = stream\n      this.localVideoref.current.srcObject = stream\n      this.pc.addStream(stream)\n    }\n\n    // called when getUserMedia() fails - see below\n    const failure = (e) => {\n      console.log('getUserMedia Error: ', e)\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n    // see the above link for more constraint options\n    const constraints = {\n      audio: false,\n      video: true,\n      // video: {\n      //   width: 1280,\n      //   height: 720\n      // },\n      // video: {\n      //   width: { min: 1280 },\n      // }\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n    navigator.mediaDevices.getUserMedia(constraints)\n      .then(success)\n      .catch(failure)\n  }\n\n  sendToPeer = (messageType, payload) => {\n    this.socket.emit(messageType, {\n      socketID: this.socket.id,\n      payload\n    })\n  }\n\n  /* ACTION METHODS FROM THE BUTTONS ON SCREEN */\n\n  createOffer = () => {\n    console.log('Offer')\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createOffer\n    // initiates the creation of SDP\n    this.pc.createOffer({ offerToReceiveVideo: 1 })\n      .then(sdp => {\n        // console.log(JSON.stringify(sdp))\n\n        // set offer sdp as local description\n        this.pc.setLocalDescription(sdp)\n\n        this.sendToPeer('offerOrAnswer', sdp)\n    })\n  }\n\n  // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createAnswer\n  // creates an SDP answer to an offer received from remote peer\n  createAnswer = () => {\n    console.log('Answer')\n    this.pc.createAnswer({ offerToReceiveVideo: 1 })\n      .then(sdp => {\n        // console.log(JSON.stringify(sdp))\n\n        // set answer sdp as local description\n        this.pc.setLocalDescription(sdp)\n\n        this.sendToPeer('offerOrAnswer', sdp)\n    })\n  }\n\n  setRemoteDescription = () => {\n    // retrieve and parse the SDP copied from the remote peer\n    const desc = JSON.parse(this.textref.value)\n\n    // set sdp as remote description\n    this.pc.setRemoteDescription(new RTCSessionDescription(desc))\n  }\n\n  addCandidate = () => {\n    // retrieve and parse the Candidate copied from the remote peer\n    // const candidate = JSON.parse(this.textref.value)\n    // console.log('Adding candidate:', candidate)\n\n    // add the candidate to the peer connection\n    // this.pc.addIceCandidate(new RTCIceCandidate(candidate))\n\n    this.candidates.forEach(candidate => {\n      console.log(JSON.stringify(candidate))\n      this.pc.addIceCandidate(new RTCIceCandidate(candidate))\n    });\n  }\n\n  render() {\n    return (\n      <div style={{textAlign:\"center\",marginTop:20}}>\n        <video\n          style={{\n            width: 300,\n            height: 300,\n            margin: 12,\n            backgroundColor: 'black',\n            border:\"4px dotted white\"\n          }}\n          ref={ this.localVideoref }\n          autoPlay>\n        </video>\n        <video\n          style={{\n            width: 300,\n            height: 300,\n            margin: 12,\n            backgroundColor: 'black',\n            border:\"4px dotted white\"\n          }}\n          ref={ this.remoteVideoref }\n          autoPlay>\n        </video>\n        <br />\n        <button onClick={this.createOffer}>SendOffer</button>\n        <button onClick={this.createAnswer}>Answer</button>\n\n        <br />\n        <textarea style={{ width: 450, height:40 }} ref={ref => { this.textref = ref }} />\n        <p>This is the text area that shows SDP shared to you by the other party</p>\n\n        {/* <br />\n        <button onClick={this.setRemoteDescription}>Set Remote Desc</button>\n        <button onClick={this.addCandidate}>Add Candidate</button> */}\n      </div>\n    )\n  }\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}